// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/ray.proto

package plugins

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// RayJobSpec defines the desired state of RayJob
type RayJob struct {
	// RayClusterSpec is the cluster template to run the job
	RayCluster *RayCluster `protobuf:"bytes,1,opt,name=ray_cluster,json=rayCluster,proto3" json:"ray_cluster,omitempty"`
	// runtime_env is base64 encoded.
	// Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
	RuntimeEnv string `protobuf:"bytes,2,opt,name=runtime_env,json=runtimeEnv,proto3" json:"runtime_env,omitempty"`
	// shutdown_after_job_finishes specifies whether the RayCluster should be deleted after the RayJob finishes.
	ShutdownAfterJobFinishes bool `protobuf:"varint,3,opt,name=shutdown_after_job_finishes,json=shutdownAfterJobFinishes,proto3" json:"shutdown_after_job_finishes,omitempty"`
	// ttl_seconds_after_finished specifies the number of seconds after which the RayCluster will be deleted after the RayJob finishes.
	TtlSecondsAfterFinished int32 `protobuf:"varint,4,opt,name=ttl_seconds_after_finished,json=ttlSecondsAfterFinished,proto3" json:"ttl_seconds_after_finished,omitempty"`
	// submitter_pod_service_account_name specifies the serviceAccount for submitterPodTemplate
	SubmitterPodServiceAccountName string   `protobuf:"bytes,5,opt,name=submitter_pod_service_account_name,json=submitterPodServiceAccountName,proto3" json:"submitter_pod_service_account_name,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *RayJob) Reset()         { *m = RayJob{} }
func (m *RayJob) String() string { return proto.CompactTextString(m) }
func (*RayJob) ProtoMessage()    {}
func (*RayJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_b980f6d58c7489d7, []int{0}
}

func (m *RayJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RayJob.Unmarshal(m, b)
}
func (m *RayJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RayJob.Marshal(b, m, deterministic)
}
func (m *RayJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RayJob.Merge(m, src)
}
func (m *RayJob) XXX_Size() int {
	return xxx_messageInfo_RayJob.Size(m)
}
func (m *RayJob) XXX_DiscardUnknown() {
	xxx_messageInfo_RayJob.DiscardUnknown(m)
}

var xxx_messageInfo_RayJob proto.InternalMessageInfo

func (m *RayJob) GetRayCluster() *RayCluster {
	if m != nil {
		return m.RayCluster
	}
	return nil
}

func (m *RayJob) GetRuntimeEnv() string {
	if m != nil {
		return m.RuntimeEnv
	}
	return ""
}

func (m *RayJob) GetShutdownAfterJobFinishes() bool {
	if m != nil {
		return m.ShutdownAfterJobFinishes
	}
	return false
}

func (m *RayJob) GetTtlSecondsAfterFinished() int32 {
	if m != nil {
		return m.TtlSecondsAfterFinished
	}
	return 0
}

func (m *RayJob) GetSubmitterPodServiceAccountName() string {
	if m != nil {
		return m.SubmitterPodServiceAccountName
	}
	return ""
}

// Define Ray cluster defines the desired state of RayCluster
type RayCluster struct {
	// HeadGroupSpecs are the spec for the head pod
	HeadGroupSpec *HeadGroupSpec `protobuf:"bytes,1,opt,name=head_group_spec,json=headGroupSpec,proto3" json:"head_group_spec,omitempty"`
	// WorkerGroupSpecs are the specs for the worker pods
	WorkerGroupSpec []*WorkerGroupSpec `protobuf:"bytes,2,rep,name=worker_group_spec,json=workerGroupSpec,proto3" json:"worker_group_spec,omitempty"`
	// Whether to enable autoscaling.
	EnableAutoscaling    bool     `protobuf:"varint,3,opt,name=enable_autoscaling,json=enableAutoscaling,proto3" json:"enable_autoscaling,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RayCluster) Reset()         { *m = RayCluster{} }
func (m *RayCluster) String() string { return proto.CompactTextString(m) }
func (*RayCluster) ProtoMessage()    {}
func (*RayCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_b980f6d58c7489d7, []int{1}
}

func (m *RayCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RayCluster.Unmarshal(m, b)
}
func (m *RayCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RayCluster.Marshal(b, m, deterministic)
}
func (m *RayCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RayCluster.Merge(m, src)
}
func (m *RayCluster) XXX_Size() int {
	return xxx_messageInfo_RayCluster.Size(m)
}
func (m *RayCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_RayCluster.DiscardUnknown(m)
}

var xxx_messageInfo_RayCluster proto.InternalMessageInfo

func (m *RayCluster) GetHeadGroupSpec() *HeadGroupSpec {
	if m != nil {
		return m.HeadGroupSpec
	}
	return nil
}

func (m *RayCluster) GetWorkerGroupSpec() []*WorkerGroupSpec {
	if m != nil {
		return m.WorkerGroupSpec
	}
	return nil
}

func (m *RayCluster) GetEnableAutoscaling() bool {
	if m != nil {
		return m.EnableAutoscaling
	}
	return false
}

// HeadGroupSpec are the spec for the head pod
type HeadGroupSpec struct {
	// Optional. RayStartParams are the params of the start command: address, object-store-memory.
	// Refer to https://docs.ray.io/en/latest/ray-core/package-ref.html#ray-start
	RayStartParams       map[string]string `protobuf:"bytes,1,rep,name=ray_start_params,json=rayStartParams,proto3" json:"ray_start_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeadGroupSpec) Reset()         { *m = HeadGroupSpec{} }
func (m *HeadGroupSpec) String() string { return proto.CompactTextString(m) }
func (*HeadGroupSpec) ProtoMessage()    {}
func (*HeadGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b980f6d58c7489d7, []int{2}
}

func (m *HeadGroupSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeadGroupSpec.Unmarshal(m, b)
}
func (m *HeadGroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeadGroupSpec.Marshal(b, m, deterministic)
}
func (m *HeadGroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeadGroupSpec.Merge(m, src)
}
func (m *HeadGroupSpec) XXX_Size() int {
	return xxx_messageInfo_HeadGroupSpec.Size(m)
}
func (m *HeadGroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HeadGroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HeadGroupSpec proto.InternalMessageInfo

func (m *HeadGroupSpec) GetRayStartParams() map[string]string {
	if m != nil {
		return m.RayStartParams
	}
	return nil
}

// WorkerGroupSpec are the specs for the worker pods
type WorkerGroupSpec struct {
	// Required. RayCluster can have multiple worker groups, and it distinguishes them by name
	GroupName string `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Required. Desired replicas of the worker group. Defaults to 1.
	Replicas int32 `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Optional. Min replicas of the worker group. MinReplicas defaults to 1.
	MinReplicas int32 `protobuf:"varint,3,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty"`
	// Optional. Max replicas of the worker group. MaxReplicas defaults to maxInt32
	MaxReplicas int32 `protobuf:"varint,4,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,omitempty"`
	// Optional. RayStartParams are the params of the start command: address, object-store-memory.
	// Refer to https://docs.ray.io/en/latest/ray-core/package-ref.html#ray-start
	RayStartParams       map[string]string `protobuf:"bytes,5,rep,name=ray_start_params,json=rayStartParams,proto3" json:"ray_start_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WorkerGroupSpec) Reset()         { *m = WorkerGroupSpec{} }
func (m *WorkerGroupSpec) String() string { return proto.CompactTextString(m) }
func (*WorkerGroupSpec) ProtoMessage()    {}
func (*WorkerGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b980f6d58c7489d7, []int{3}
}

func (m *WorkerGroupSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerGroupSpec.Unmarshal(m, b)
}
func (m *WorkerGroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerGroupSpec.Marshal(b, m, deterministic)
}
func (m *WorkerGroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerGroupSpec.Merge(m, src)
}
func (m *WorkerGroupSpec) XXX_Size() int {
	return xxx_messageInfo_WorkerGroupSpec.Size(m)
}
func (m *WorkerGroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerGroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerGroupSpec proto.InternalMessageInfo

func (m *WorkerGroupSpec) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *WorkerGroupSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *WorkerGroupSpec) GetMinReplicas() int32 {
	if m != nil {
		return m.MinReplicas
	}
	return 0
}

func (m *WorkerGroupSpec) GetMaxReplicas() int32 {
	if m != nil {
		return m.MaxReplicas
	}
	return 0
}

func (m *WorkerGroupSpec) GetRayStartParams() map[string]string {
	if m != nil {
		return m.RayStartParams
	}
	return nil
}

func init() {
	proto.RegisterType((*RayJob)(nil), "flyteidl.plugins.RayJob")
	proto.RegisterType((*RayCluster)(nil), "flyteidl.plugins.RayCluster")
	proto.RegisterType((*HeadGroupSpec)(nil), "flyteidl.plugins.HeadGroupSpec")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.plugins.HeadGroupSpec.RayStartParamsEntry")
	proto.RegisterType((*WorkerGroupSpec)(nil), "flyteidl.plugins.WorkerGroupSpec")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.plugins.WorkerGroupSpec.RayStartParamsEntry")
}

func init() { proto.RegisterFile("flyteidl/plugins/ray.proto", fileDescriptor_b980f6d58c7489d7) }

var fileDescriptor_b980f6d58c7489d7 = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xdf, 0x6a, 0xdb, 0x30,
	0x14, 0xc6, 0x71, 0xd2, 0x94, 0xf6, 0x64, 0x5d, 0x53, 0x6d, 0x30, 0x93, 0xfd, 0x69, 0x9a, 0xab,
	0xdc, 0x34, 0x86, 0x96, 0xc1, 0xd8, 0x08, 0x23, 0x1b, 0x5d, 0x47, 0x60, 0xa3, 0x28, 0x17, 0x83,
	0xc1, 0x10, 0xb2, 0xad, 0x38, 0x5a, 0x6d, 0xc9, 0x48, 0x72, 0x52, 0xbf, 0xd5, 0x76, 0xb3, 0x17,
	0xd9, 0x0b, 0x0d, 0xcb, 0xae, 0xf3, 0xa7, 0x85, 0xde, 0xed, 0x4e, 0x3a, 0xdf, 0xef, 0x3b, 0x1c,
	0x7d, 0x12, 0x82, 0xee, 0x2c, 0xce, 0x0d, 0xe3, 0x61, 0xec, 0xa5, 0x71, 0x16, 0x71, 0xa1, 0x3d,
	0x45, 0xf3, 0x61, 0xaa, 0xa4, 0x91, 0xa8, 0x73, 0xab, 0x0d, 0x2b, 0xad, 0xff, 0xab, 0x01, 0xbb,
	0x98, 0xe6, 0x13, 0xe9, 0xa3, 0x11, 0xb4, 0x15, 0xcd, 0x49, 0x10, 0x67, 0xda, 0x30, 0xe5, 0x3a,
	0x3d, 0x67, 0xd0, 0x3e, 0x7b, 0x31, 0xdc, 0xb6, 0x0c, 0x31, 0xcd, 0x3f, 0x96, 0x0c, 0x06, 0x55,
	0xaf, 0xd1, 0x31, 0xb4, 0x55, 0x26, 0x0c, 0x4f, 0x18, 0x61, 0x62, 0xe1, 0x36, 0x7a, 0xce, 0x60,
	0x1f, 0x43, 0x55, 0xba, 0x10, 0x0b, 0x34, 0x82, 0xe7, 0x7a, 0x9e, 0x99, 0x50, 0x2e, 0x05, 0xa1,
	0x33, 0xc3, 0x14, 0xf9, 0x29, 0x7d, 0x32, 0xe3, 0x82, 0xeb, 0x39, 0xd3, 0x6e, 0xb3, 0xe7, 0x0c,
	0xf6, 0xb0, 0x7b, 0x8b, 0x8c, 0x0b, 0x62, 0x22, 0xfd, 0x4f, 0x95, 0x8e, 0xde, 0x41, 0xd7, 0x98,
	0x98, 0x68, 0x16, 0x48, 0x11, 0xea, 0xaa, 0x43, 0xe5, 0x0e, 0xdd, 0x9d, 0x9e, 0x33, 0x68, 0xe1,
	0x67, 0xc6, 0xc4, 0xd3, 0x12, 0xb0, 0xfe, 0xca, 0x1c, 0xa2, 0x09, 0xf4, 0x75, 0xe6, 0x27, 0xdc,
	0x14, 0xa6, 0x54, 0x86, 0x44, 0x33, 0xb5, 0xe0, 0x01, 0x23, 0x34, 0x08, 0x64, 0x26, 0x0c, 0x11,
	0x34, 0x61, 0x6e, 0xcb, 0xce, 0xfc, 0xaa, 0x26, 0xaf, 0x64, 0x38, 0x2d, 0xb9, 0x71, 0x89, 0x7d,
	0xa5, 0x09, 0xeb, 0xff, 0x75, 0x00, 0x56, 0x19, 0xa0, 0x4b, 0x38, 0x9c, 0x33, 0x1a, 0x92, 0x48,
	0xc9, 0x2c, 0x25, 0x3a, 0x65, 0x41, 0x15, 0xdd, 0xf1, 0xdd, 0xe8, 0x3e, 0x33, 0x1a, 0x5e, 0x16,
	0xdc, 0x34, 0x65, 0x01, 0x3e, 0x98, 0xaf, 0x6f, 0xd1, 0x17, 0x38, 0x5a, 0x4a, 0x75, 0xcd, 0xd4,
	0x7a, 0xab, 0x46, 0xaf, 0x39, 0x68, 0x9f, 0x9d, 0xdc, 0x6d, 0xf5, 0xcd, 0xa2, 0xab, 0x66, 0x87,
	0xcb, 0xcd, 0x02, 0x3a, 0x05, 0xc4, 0x04, 0xf5, 0x63, 0x46, 0x68, 0x66, 0xa4, 0x0e, 0x68, 0xcc,
	0x45, 0x54, 0xa5, 0x7c, 0x54, 0x2a, 0xe3, 0x95, 0xd0, 0xff, 0xed, 0xc0, 0xc1, 0xc6, 0x78, 0xe8,
	0x07, 0x74, 0x8a, 0xf7, 0xa0, 0x0d, 0x55, 0x86, 0xa4, 0x54, 0xd1, 0x44, 0xbb, 0x8e, 0x1d, 0xe7,
	0xfc, 0x81, 0x93, 0x15, 0x4f, 0x64, 0x5a, 0xd8, 0xae, 0xac, 0xeb, 0x42, 0x18, 0x95, 0xe3, 0xc7,
	0x6a, 0xa3, 0xd8, 0x1d, 0xc3, 0x93, 0x7b, 0x30, 0xd4, 0x81, 0xe6, 0x35, 0xcb, 0x6d, 0x84, 0xfb,
	0xb8, 0x58, 0xa2, 0xa7, 0xd0, 0x5a, 0xd0, 0x38, 0x63, 0xd5, 0x93, 0x2a, 0x37, 0x6f, 0x1b, 0x6f,
	0x9c, 0xfe, 0x9f, 0x06, 0x1c, 0x6e, 0xe5, 0x80, 0x5e, 0x02, 0x94, 0xf1, 0xd9, 0x1b, 0x2d, 0xdb,
	0xec, 0xdb, 0x4a, 0x71, 0x79, 0xa8, 0x0b, 0x7b, 0x8a, 0xa5, 0x31, 0x0f, 0xa8, 0xb6, 0xfd, 0x5a,
	0xb8, 0xde, 0xa3, 0x13, 0x78, 0x94, 0x70, 0x41, 0x6a, 0xbd, 0x69, 0xf5, 0x76, 0xc2, 0x05, 0x5e,
	0x47, 0xe8, 0xcd, 0x0a, 0xd9, 0xa9, 0x10, 0x7a, 0x53, 0x23, 0xe4, 0x9e, 0xd8, 0x5a, 0x36, 0xb6,
	0xd7, 0x0f, 0xde, 0xe2, 0x7f, 0x0a, 0xee, 0xc3, 0xfb, 0xef, 0xa3, 0x88, 0x9b, 0x79, 0xe6, 0x0f,
	0x03, 0x99, 0x78, 0x76, 0x2a, 0xa9, 0xa2, 0x72, 0xe1, 0xd5, 0xff, 0x47, 0xc4, 0x84, 0x97, 0xfa,
	0xa7, 0x91, 0xf4, 0xb6, 0xbf, 0x14, 0x7f, 0xd7, 0xfe, 0x27, 0xe7, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xaa, 0xb7, 0x09, 0x53, 0x6d, 0x04, 0x00, 0x00,
}
